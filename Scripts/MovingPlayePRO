using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;

public class MovingPlayer : MonoBehaviour
{
    private Rigidbody2D rb;
    private Vector2 movevector2;
    private Animator anim;
    private SpriteRenderer sr;
    private bool faceRotation = true;
    private bool onGround;

    public GameObject openDoor;
    public GameObject door;

    public float jumpPower = 7f;
    //public bool jumpControl;
    //private float jumpTime = 0;
    //public float jumpControlTime = 0.7f;
    private int jampCount = 0;
    public int maxJampValur = 2;


    public Transform groundCheck;
    public LayerMask ground;
    public float cheakRadius = 0.3f;
    public float speed = 7f;

    [SerializeField]
    private Text redDiamondCount, blueDiamondCount, goldCoinCount, starCount;
    private int redDiamondCounter, blueDiamondCounter, goldCoinCounter, starCounter;


    // Start is called before the first frame update
    void Start()
    {
        //openDoor = GetComponent<GameObject>();
        //door = GetComponent<GameObject>();

        rb = GetComponent<Rigidbody2D>();
        anim = GetComponent<Animator>();
        sr = GetComponent<SpriteRenderer>();

        redDiamondCounter = 0;
        blueDiamondCounter = 0;
        goldCoinCounter = 0;
        starCounter = 0;
    }

    // Update is called once per frame
    void Update()
    {
        Jump();
        Walking();
        Flip();
        CheckingGround();
        NumberOfObjects();
    }


    public void Walking()
    {
        movevector2.x = Input.GetAxis("Horizontal");
        anim.SetFloat("moveX", Mathf.Abs(movevector2.x));
        rb.velocity = new Vector2(movevector2.x * speed, rb.velocity.y);
        //rb.AddForce(movevector2 * speed); // дивижение с инерцией 
    }

    public void Flip()
    {
        if((movevector2.x >0 && !faceRotation) || (movevector2.x < 0 && faceRotation))
        {
            transform.localScale *= new Vector2(-1, 1);
            faceRotation = !faceRotation;
        }

    }

    // Двойной прыжок, не работает //
    
    //public void Jump()
    //{
    //    if(Input.GetKey(KeyCode.Space))
    //    {
    //        if (onGround)
    //            jumpControl = true;
    //        else
    //            jumpControl = false;
    //    }
         
    //    if(jumpControl)
    //    {
    //        if ((jumpTime += Time.deltaTime) < jumpControlTime)

    //            rb.AddForce(Vector2.up * jumpPower / (jumpTime * 10));
    //        else
    //            jumpTime = 0;
    //    }
    //}

    //  Обычный прышок  //
    public void Jump()
    {
        if (Input.GetKeyDown(KeyCode.Space) && (onGround || (++jampCount < maxJampValur)))
        {
              //Без физики
            //rb.velocity = new Vector2(rb.velocity.x, jumpPower);
              //С физикой
            rb.AddForce(Vector2.up * jumpPower);
        }
        if(onGround)
        {
            maxJampValur = 0;
        }
    }

    public void CheckingGround()
    {
        onGround = Physics2D.OverlapCircle(groundCheck.position, cheakRadius, ground);
        anim.SetBool("onGround", onGround);
    }

    public void NumberOfObjects()
    {
        if (goldCoinCounter >= 3)
        {
            goldCoinCount.color = new Color(255, 0, 0);
            goldCoinCount.fontSize = 30;
            openDoor.SetActive(true);
            door.SetActive(false);
        }
            
        
        redDiamondCount.text = redDiamondCounter.ToString();
        blueDiamondCount.text = blueDiamondCounter.ToString();
        goldCoinCount.text = goldCoinCounter.ToString();
        starCount.text = starCounter.ToString();
    }


    private void OnTriggerEnter2D(Collider2D collision)
    {
        if(collision.tag == "Menu")
        {
            SceneManager.LoadScene(0);
        }
        else if (collision.tag == "Respawn1")
        {
            SceneManager.LoadScene(1);
        }
        else if(collision.tag == "Respawn2")
        {
            SceneManager.LoadScene(2);
        }
        else if (collision.tag == "Door")
        {
            SceneManager.LoadScene(2);
        }
        else if(collision.GetComponent<RedDiamond> ())
        {
            ++redDiamondCounter;
            Destroy(collision.gameObject);
        }
        else if (collision.GetComponent<BlueDiamond>())
        {
            ++blueDiamondCounter;
            Destroy(collision.gameObject);
        }
        else if (collision.GetComponent<GoldCoin> ())
        {
            ++goldCoinCounter;
            Destroy(collision.gameObject);
        }
        else if (collision.GetComponent<Star>())
        {
            ++starCounter;
            Destroy(collision.gameObject);
        }
    }
}
